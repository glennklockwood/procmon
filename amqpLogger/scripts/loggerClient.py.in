#!/usr/bin/env python

import pika
import sys
import re
from operator import methodcaller
from threading import Thread
from datetime import datetime
import time
import curses
from os import fork, chdir, setsid, umask

timeout=60
lastConnection=datetime.now()
channel = None
quitting = False
outputFile = sys.stdout

def recv_message(channel, method_frame, header_frame, body):
    global outputFile
    lastConnection = datetime.now()
    print "%s" % (method_frame.routing_key)
    outputFile.write(body + '\n')
    outputFile.flush()

def setupConnection(routingKeys):
    credentials = pika.PlainCredentials(@AMQPLOGGER_AMQP_USER@, @AMQPLOGGER_AMQP_PASSWORD@)
    connection = pika.BlockingConnection(pika.ConnectionParameters(@AMQPLOGGER_AMQP_HOST@, @AMQPLOGGER_AMQP_PORT@, @AMQPLOGGER_AMQP_VHOST@, credentials))
    channel = connection.channel()
    channel.exchange_declare(exchange=@AMQPLOGGER_AMQP_EXCHANGE@, exchange_type="topic")
    queueRes = channel.queue_declare(exclusive=True)
    queue_name = queueRes.method.queue
    for routing_key in routingKeys:
        channel.queue_bind(exchange=@AMQPLOGGER_AMQP_EXCHANGE@, queue=queue_name, routing_key=routing_key)
    try:
        channel.basic_consume(recv_message, queue=queue_name, no_ack=True)
        channel.start_consuming()
    except IOError as e:
        if e.errno == errno.EPIPE:
            pass
        else:
            raise(e)

def main(routingKeys):

    setupConnection(routingKeys)

def usage():
    print "Usage: procmonRead <routingKey> ..."

if __name__ == "__main__":

    outputFile = sys.stdout
    i = 1
    pos = 0
    routingKeys = []
    while i < len(sys.argv):
        if sys.argv[i] == "--help" or sys.argv[i] == "-h":
            usage()
            sys.exit(0)
        elif sys.argv[i] == '-o':
            i += 1
            outputFile = open(sys.argv[i], 'a')
        else:
            #print "Routing Key: %s" % routingKey_str
            routingKeys.append(sys.argv[i])

        i += 1

    if outputFile != sys.stdout:
        try:
            pid = fork()
            if pid > 0:
                sys.exit(0)
        except OSError, e:
            sys.stderr.write('Forking to background failed, exiting.')
            sys.exit(1)
         
        chdir("/")
        setsid()
        umask(0)
     
    main(routingKeys)
    
