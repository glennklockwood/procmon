#!/usr/bin/env python

import pika
import sys
import re
from operator import methodcaller
from threading import Thread
from datetime import datetime
import time
import curses
import signal
import procmon

timeout=60
lastConnection=datetime.now()
channel = None
quitting = False

def handler(signum, frame):
    print 'received signal %d' % signum
    sys.exit(128+signum);

def recv_message(channel, method_frame, header_frame, body):
    lastConnection = datetime.now()
    print "%s" % (method_frame.routing_key)
    msg_type = method_frame.routing_key.split('.')[-1]
    msg_data = None
    if msg_type == "procstat":
        msg_data = procmon.parse_procstat(body)
    elif msg_type == "procdata":
        msg_data = procmon.parse_procdata(body)
    elif msg_type == "procfd":
        msg_data = procmon.parse_procfd(body)
        
    print "%s" % msg_data
    print 

def setupConnection(routingKeys):
    credentials = pika.PlainCredentials('@DEFAULT_AMQP_USER@','@DEFAULT_AMQP_PASSWORD@')
    connection = pika.BlockingConnection(pika.ConnectionParameters('@DEFAULT_AMQP_HOST@', @DEFAULT_AMQP_PORT@, "@DEFAULT_AMQP_VHOST@", credentials))
    channel = connection.channel()
    channel.exchange_declare(exchange="@DEFAULT_AMQP_EXCHANGE@", exchange_type="topic")
    queueRes = channel.queue_declare(exclusive=True)
    queue_name = queueRes.method.queue
    for routing_key in routingKeys:
        channel.queue_bind(exchange="@DEFAULT_AMQP_EXCHANGE@", queue=queue_name, routing_key=routing_key)
    try:
        channel.basic_consume(recv_message, queue=queue_name, no_ack=True)
        channel.start_consuming()
    except IOError as e:
        if e.errno == errno.EPIPE:
            pass
        else:
            raise(e)

def main(routingKeys):

    setupConnection(routingKeys)

def usage():
    print "Usage: procmonRead <routingKey> ..."

if __name__ == "__main__":

    i = 1
    pos = 0
    routingKeys = []
    while i < len(sys.argv):
        if sys.argv[i] == "--help" or sys.argv[i] == "-h":
            usage()
            sys.exit(0)
        else:
#routingKey_str = '*.%s.*.*' % sys.argv[i]
#            print "Routing Key: %s" % routingKey_str
#            routingKeys.append(routingKey_str)
            routingKeys.append(sys.argv[i])

        i += 1
    signal.signal(signal.SIGTSTP, handler)
    main(routingKeys)
    
