#!/usr/bin/env python

import pika
import sys
import re
from operator import methodcaller
from threading import Thread
from datetime import datetime
import time
import curses

timeout=60
lastConnection=datetime.now()
channel = None
quitting = False

def setupInterface(stdscr):
	while not quitting:
		(maxy,maxx) = stdscr.getmaxyx()
		stdscr.hline(2, 1, curses.ACS_HLINE, maxx)
		stdscr.refresh()

def interfaceThreadSetup():
	curses.wrapper(setupInterface)

def recv_message(channel, method_frame, header_frame, body):
	lastConnection = datetime.now()
	print "%s: %s" % (method_frame.routing_key, body)
	print

def setupConnection(routingKeys):
	credentials = pika.PlainCredentials('procmon','nomcorp')
	connection = pika.BlockingConnection(pika.ConnectionParameters('genepool10.nersc.gov', 5672, "jgi", credentials))
	channel = connection.channel()
	channel.exchange_declare(exchange="procmon", exchange_type="topic")
	queueRes = channel.queue_declare(exclusive=True)
	queue_name = queueRes.method.queue
	for routing_key in routingKeys:
		channel.queue_bind(exchange="procmon", queue=queue_name, routing_key=routing_key)
	try:
		channel.basic_consume(recv_message, queue=queue_name, no_ack=True)
		channel.start_consuming()
	except IOError as e:
		if e.errno == errno.EPIPE:
			pass
		else:
			raise(e)

def main(routingKeys):

	interfaceThread = Thread(target=interfaceThreadSetup)
	interfaceThread.start()
	
	connThread = Thread(target=setupConnection, args=(routingKeys,))
	connThread.start()

	try:
		lastConnection = datetime.now()
		while True:
			time.sleep(5)
			currTime = datetime.now()
			if (currTime - lastConnection).total_seconds() > timeout:
				print "got timeout, trying to close connection"
				if channel is not None:
					channel.stop_consuming()
					channel.close()
				break
	except KeyboardInterrupt:
		print "got keyboard interrupt, trying to close connection"
		quitting = True
		if channel is not None:
			channel.stop_consuming()
			channel.close()

def usage():
	print "Usage: topjob <jobid>[.task][@hostname] ..."

if __name__ == "__main__":

	i = 1
	pos = 0
	routingKeys = []
	while i < len(sys.argv):
		if sys.argv[i] == "--help" or sys.argv[i] == "-h":
			usage()
			sys.exit(0)
		else:
			hostname = "*"
			jobid = "*"
			taskid = "*"
			messageType = "*"
			arg = sys.argv[i]
			fields = re.split(r"[\.@]", arg)
			try:
				jobid = fields[0]
				taskid = fields[1]
				hostname = fields[2]
			except:
				pass
			routingKey = [hostname, jobid, taskid, messageType]
			routingKey = map(methodcaller("split", "."), routingKey)
			routingKey = map(methodcaller("__getitem__", 0), routingKey)
			routingKey_str = ".".join(routingKey)
			#print "Routing Key: %s" % routingKey_str
			routingKeys.append(routingKey_str)

		i += 1
	main(routingKeys)
	
